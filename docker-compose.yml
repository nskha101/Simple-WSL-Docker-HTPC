version: "3.4"
services:
  nzbget:
    container_name: nzbget
    image: linuxserver/nzbget:latest
    restart: always
    ports:
      - 6789:6789
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    volumes:
      - /mnt:/mnt # give access to the mounted drives
      - ${ROOT}/downloads:/downloads # download folder
      - ${ROOT}/config/nzbget:/config # config files

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: always
    ports:
      - 8989:8989
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    volumes:
      - /mnt:/mnt # give access to the mounted drives
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/sonarr:/config # config files
      - ${ROOT}/complete/tv:/tv # tv shows folder
      - ${ROOT}/downloads:/downloads # download folder

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: always
    ports:
      - 7878:7878
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    volumes:
      - /mnt:/mnt # give access to the mounted drives
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/complete/movies:/movies # tv shows folder
      - ${ROOT}/downloads:/downloads # download folder
      - ${ROOT}/config/radarr:/config # config files

  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr:latest
    restart: always
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    volumes:
      - /mnt:/mnt # give access to the mounted drives
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/prowlarr:/config # config files
    ports:
      - 9696:9696

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    restart: always
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ} # timezone, defined in .env
      - PORT=5055 #optional
    ports:
      - 5055:5055
    volumes:
      - ${ROOT}/config/overseerr:/config # config files

  unmanic:
    container_name: unmanic
    image: josh5/unmanic:latest
    restart: always
    ports:
      - 8888:8888
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - NVIDIA_VISIBLE_DEVICES=all

    volumes:
      - ${ROOT}/config/unmanic:/config
      - ${UNMANIC_LIB}:/library
      - ${UNMANIC_CACHE}:/tmp/unmanic
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu,video]

# Immich Setup
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    restart: always
    command: [ "start.sh", "immich" ]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - 2283:3001
    depends_on:
      - redis
      - database
      - typesense

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    restart: always
    extends:
      file: hwaccel.yml
      service: hwaccel
    command: [ "start.sh", "microservices" ]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - redis
      - database
      - typesense


  immich-machine-learning:
    container_name: immich_machine_learning
    restart: always
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env

  typesense:
    container_name: immich_typesense
    image: typesense/typesense:0.24.1@sha256:9bcff2b829f12074426ca044b56160ca9d777a0c488303469143dd9f8259d4dd
    restart: always
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
      # remove this to get debug messages
      - GLOG_minloglevel=1
    volumes:
      - tsdata:/data

  redis:
    container_name: immich_redis
    restart: always
    image: redis:6.2-alpine@sha256:60e49e22fa5706cd8df7d5e0bc50ee9bab7c608039fa653c4d961014237cca46

  database:
    container_name: immich_postgres
    image: postgres:14-alpine@sha256:6a0e35296341e676fe6bd8d236c72afffe2dfe3d7eb9c2405c0f3fc04500cd07
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data

volumes:
  pgdata:
  model-cache:
  tsdata:


